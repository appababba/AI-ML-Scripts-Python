import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import OrdinalEncoder
from sklearn.preprocessing import KBinsDiscretizer

homes = pd.read_csv('homes.csv')
priceFloor = homes[['Price', 'Floor']]
school = homes[['School']]

# Define a standardization scaler to transform values
scaler_standard = StandardScaler()

# Apply scaler to the priceFloor data
scaled = scaler_standard.fit_transform(priceFloor)

homes_standardized = pd.DataFrame(scaled, columns=['Price','Floor'])
print('Standardized data: \n', homes_standardized)

# Define a normalization scaler to transform values
scaler_normal = MinMaxScaler()

# Apply scaler to the priceFloor data
normalized = scaler_normal.fit_transform(priceFloor)

homes_normalized = pd.DataFrame(normalized, columns=['Price','Floor'])
print('Normalized data: \n', homes_normalized)

# Define the OrdinalEncoder() function
ordinal_encoder = OrdinalEncoder()
# Create a dataframe of the ordinal encoder function fit to the school data, with the column labeled encoding
encoded_values = ordinal_encoder.fit_transform(school)

# Join the new column to the school data
school_encoded = school.copy()
school_encoded['encoding'] = encoded_values

print('Encoded data: \n', school_encoded)

# Create a discretizer with equal weights and 3 bins
discretizer_eqwidth = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')

# Fit the discretizer to the Floor feature from the priceFloor data. 
# Reshape the feature to an array with dimensions (76,1).
floor_reshaped = priceFloor['Floor'].values.reshape(76,1)
discretizer_eqwidth.fit(floor_reshaped)

print('Bin widths: \n', discretizer_eqwidth.bin_edges_[0])